```{r setup, echo = FALSE}

# Load the required libraries
library(tidyverse)
library(googlesheets4)
library(wesanderson)  # Color palettes
library(gridExtra)
library(grid)
library(cowplot)
library(glue)
library(formattable)  # For table formatting
library(htmltools)
library(webshot)

# Define input variables
data_url <- 'https://docs.google.com/spreadsheets/d/1CpXpoodchi_0ui6dQRNzxE2Dl4VO9b0W2zzWzZ5j8nA/edit#gid=0'
month_start_date <- "2024-05-01"
month_end_date <- "2024-05-31"
week_start_date <- "2024-05-19"
week_end_date <- "2024-05-25"

# Function to read Google Sheets data with retry mechanism
read_sheet_with_retry <- function(url, retries = 5, backoff = 1) {
  for (i in seq_len(retries)) {
    result <- try(read_sheet(url), silent = TRUE)
    if (!inherits(result, "try-error")) {
      return(result)
    }
    Sys.sleep(backoff)
    backoff <- backoff * 2
  }
  stop("Failed to read Google Sheets data after multiple attempts")
}

# Function to process data
process_data <- function(start_date, end_date) {
  daily_workout_tbl <- read_sheet_with_retry(data_url)
  
  daily_workout_tbl %>%
    pivot_longer(
      cols = starts_with("workouts_"),
      names_to = "Person",
      values_to = "Workouts",
      names_prefix = "workouts_"
    ) %>%
    mutate(Date = as.Date(Date, format = "%Y-%m-%d")) %>%
    filter(Date >= as.Date(start_date) & Date <= as.Date(end_date)) %>%
    group_by(Person) %>%
    summarize(
      Total_Workouts = sum(Workouts, na.rm = TRUE),
      Daily_Average = mean(Workouts, na.rm = TRUE) %>% round(2)
    ) %>%
    arrange(desc(Total_Workouts)) %>%
    mutate(
      Rank = row_number(),
      Person = glue("{Rank}. {Person}"),
      Person = fct_inorder(Person) %>% fct_rev()
    )
}

# -------------------------------------------------------------------------


# Process data for the full month and the specific week
full_data <- process_data(month_start_date, month_end_date)
filtered_week <- process_data(week_start_date, week_end_date)


# -------------------------------------------------------------------------


# Helper function to format dates in ordinal style (1st, 2nd, 3rd, etc.)
ordinal_date <- function(date) {
  suffix <- c("th", "st", "nd", "rd", "th", "th", "th", "th", "th", "th")
  day <- as.integer(format(date, "%d"))
  month <- format(date, "%B")
  paste0(month, " ", day, suffix[day %% 10 + 1 * (day < 10 | day > 20)])
}

# Function to create plots
create_plot <- function(data, title) {
  ggplot(data, aes(x = Person, y = Total_Workouts, fill = Person)) +
    geom_col(show.legend = FALSE, width = 0.7) +
    scale_fill_manual(values = wes_palette("GrandBudapest2", n = length(unique(data$Person)), type = "continuous")) +
    labs(x = "", y = "# of workouts", title = title) +
    theme_minimal(base_size = 14) +
    theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
          axis.text.y = element_text(hjust = 0),
          axis.title.x = element_text(margin = margin(t = 10, b = 10))) +
    coord_flip()
}

# Create the plots with dynamic titles using glue and formatted dates
weekly_plot <- create_plot(filtered_week, glue("{ordinal_date(as.Date(week_start_date))} to {ordinal_date(as.Date(week_end_date))} Workout Leaderboard"))
monthly_plot <- create_plot(full_data, glue("{ordinal_date(as.Date(month_start_date))} to {ordinal_date(as.Date(month_end_date))} Workout Leaderboard"))

# Create a table with conditional formatting
full_data_table <- full_data %>%
  select(Person, Total_Workouts, Daily_Average) %>%
  formattable(list(
    Person = formatter("span", style = x ~ style(`text-align` = "left")),
    Daily_Average = formatter("span",
                              style = x ~ ifelse(x >= 5/7, 
                                                 style(color = "#579981", font.weight = "bold"),
                                                 ifelse(x < 3/7, 
                                                        style(color = "#ff2020", font.weight = "bold"), 
                                                        NA))
    )
  ))

# Function to export formattable to PNG
export_formattable <- function(f, file, title, width = "100%", height = NULL, 
                               background = "white", delay = 0.2){
  w <- as.htmlwidget(f, width = width, height = height)
  w <- tagList(tags$h3(title, style = "text-align:center;"), w)
  path <- html_print(w, background = background, viewer = NULL)
  url <- paste0("file:///", gsub("\\\\", "/", normalizePath(path)))
  webshot(url, file = file, selector = ".formattable_widget", delay = delay)
}

# Export the full data table with title
month_name <- format(as.Date(month_start_date), "%B")
export_formattable(full_data_table, glue("figures/{month_name}_data_summary_{month_start_date}_{month_end_date}.png"), title = glue("{month_name} Summary Table"))

# Save the weekly plot
ggsave(glue("figures/weekly_workout_summary_{week_start_date}_{week_end_date}.png"), weekly_plot, width = 6, height = 8, dpi = 300, bg = "white")

# Save the full month plot
ggsave(glue("figures/monthly_workout_summary_{month_start_date}_{month_end_date}.png"), monthly_plot, width = 6, height = 8, dpi = 300, bg = "white")





```

